@CrossOrigin


-The @CrossOrigin annotation in Spring is used to enable Cross-Origin Resource Sharing (CORS) for a specific controller or controller method.

-Cross-Origin Resource Sharing (CORS) is a mechanism that allows resources (e.g., APIs) on a web page to be requested from another domain outside the domain from which the resource originated. 
-This is a security feature implemented by web browsers to prevent unauthorized requests from being made across domains.

-When you annotate a controller or a specific controller method with @CrossOrigin, you're telling Spring to include the appropriate CORS headers in the HTTP response for requests to that endpoint. 
-These headers inform the browser that it's allowed to make requests to the endpoint from a different origin (domain, protocol, or port).

Here's how the @CrossOrigin annotation works:

1) If you annotate a controller class with @CrossOrigin, it will apply CORS configuration to all handler methods within that controller.
2) If you annotate a specific handler method within the controller with @CrossOrigin, it will apply CORS configuration only to that specific method.

-In your example, the @CrossOrigin annotation is applied at the class level, meaning that CORS configuration will be applied to all handler methods within the AdminController class. 
-This allows requests from different origins to access the /admin endpoints defined in this controller.

-You can customize the behavior of @CrossOrigin by providing attributes such as origins, allowedHeaders, methods, etc. 
-For example, you can specify which origins are allowed to access the endpoint, which HTTP methods are allowed, and which headers are allowed in the request. 
-If no attributes are provided, the default behavior allows requests from all origins, all headers, and all methods.

-Here's a simplified example of customizing @CrossOrigin:

java code

	@CrossOrigin(origins = "http://example.com", methods = {RequestMethod.GET, RequestMethod.POST})
	
-This example restricts CORS to only allow requests from http://example.com and only allows GET and POST HTTP methods.

-In summary, @CrossOrigin is used to enable CORS for Spring MVC controllers, allowing controlled access to endpoints from different origins.
